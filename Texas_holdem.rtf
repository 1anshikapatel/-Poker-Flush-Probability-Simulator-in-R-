{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww28600\viewh18000\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 # Create a standard deck of cards\
create_deck <- function() \{\
  suits <- c("Hearts", "Diamonds", "Clubs", "Spades")\
  ranks <- c("2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K", "A")\
  return(paste(rep(ranks, each = 4), suits))\
\}\
\
# Check if a Flush is possible with hole cards\
is_flush_possible_hole <- function(hole_cards) \{\
  suits <- sapply(hole_cards, function(card) strsplit(card, " ")[[1]][2])\
  length(unique(suits)) == 1  # True if both hole cards share the same suit\
\}\
\
# Check if a Flush is formed\
is_flush <- function(cards) \{\
  suits <- sapply(cards, function(card) strsplit(card, " ")[[1]][2])\
  max(table(suits)) >= 5\
\}\
\
# Simulate probabilities for forming a Flush\
calculate_probabilities <- function(deck, simulations = 10000) \{\
  flush_possible_hole <- 0\
  flush_flop <- 0\
  flush_turn <- 0\
  flush_river <- 0\
  \
  # Simulate fixed cards\
  hole_cards <- sample(deck, 2)\
  remaining_deck <- setdiff(deck, hole_cards)\
  \
  flop_cards <- sample(remaining_deck, 3)\
  remaining_deck <- setdiff(remaining_deck, flop_cards)\
  \
  turn_card <- sample(remaining_deck, 1)\
  remaining_deck <- setdiff(remaining_deck, turn_card)\
  \
  river_card <- sample(remaining_deck, 1)\
  \
  for (i in 1:simulations) \{\
    # Shuffle deck and deal cards\
    shuffled_deck <- sample(deck)\
    \
    # Deal hole cards\
    sim_hole <- shuffled_deck[1:2]\
    sim_remaining <- shuffled_deck[-(1:2)]\
    if (is_flush_possible_hole(sim_hole)) flush_possible_hole <- flush_possible_hole + 1\
    \
    # Deal flop cards\
    sim_flop <- sim_remaining[1:3]\
    sim_remaining <- sim_remaining[-(1:3)]\
    if (is_flush(c(sim_hole, sim_flop))) flush_flop <- flush_flop + 1\
    \
    # Deal turn card\
    sim_turn <- sim_remaining[1]\
    sim_remaining <- sim_remaining[-1]\
    if (is_flush(c(sim_hole, sim_flop, sim_turn))) flush_turn <- flush_turn + 1\
    \
    # Deal river card\
    sim_river <- sim_remaining[1]\
    sim_all <- c(sim_hole, sim_flop, sim_turn, sim_river)\
    if (is_flush(sim_all)) flush_river <- flush_river + 1\
  \}\
  \
  list(\
    hole_cards = hole_cards,\
    flop_cards = flop_cards,\
    turn_card = turn_card,\
    river_card = river_card,\
    prob_hole = flush_possible_hole / simulations,\
    prob_flop = flush_flop / simulations,\
    prob_turn = flush_turn / simulations,\
    prob_river = flush_river / simulations\
  )\
\}\
\
# Main function to calculate probabilities and display results\
main <- function() \{\
  deck <- create_deck()\
  \
  # Run simulation\
  results <- calculate_probabilities(deck, simulations = 10000)\
  \
  # Extract results\
  hole <- results$hole_cards\
  flop <- results$flop_cards\
  turn <- results$turn_card\
  river <- results$river_card\
  \
  # Print results in the specified format\
  cat("Hole Cards: ", paste(hole, collapse = ", "), "\\n")\
  cat("Probability of Flush after Hole Cards: ", round(results$prob_hole, 4), "\\n\\n")\
  \
  cat("Flop Cards: ", paste(flop, collapse = ", "), "\\n")\
  cat("Probability of Flush after Flop: ", round(results$prob_flop, 4), "\\n\\n")\
  \
  cat("Turn Card: ", paste(turn, collapse = ", "), "\\n")\
  cat("Probability of Flush after Turn: ", round(results$prob_turn, 4), "\\n\\n")\
  \
  cat("River Card: ", paste(river, collapse = ", "), "\\n")\
  cat("Probability of Flush after River: ", round(results$prob_river, 4), "\\n")\
\}\
\
# Execute the program\
main()}